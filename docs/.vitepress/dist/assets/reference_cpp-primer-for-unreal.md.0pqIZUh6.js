import{_ as t,c as a,o as r,ag as l}from"./chunks/framework.S-Qvb3wi.js";const m=JSON.parse('{"title":"C++ + Unreal Primer","description":"","frontmatter":{},"headers":[],"relativePath":"reference/cpp-primer-for-unreal.md","filePath":"reference/cpp-primer-for-unreal.md","lastUpdated":null}'),i={name:"reference/cpp-primer-for-unreal.md"};function n(o,e,s,p,c,u){return r(),a("div",null,e[0]||(e[0]=[l('<h1 id="c-unreal-primer" tabindex="-1">C++ + Unreal Primer <a class="header-anchor" href="#c-unreal-primer" aria-label="Permalink to &quot;C++ + Unreal Primer&quot;">​</a></h1><p>Key UE-C++ concepts</p><ul><li>Reflection: UCLASS/USTRUCT/UENUM/UPROPERTY/UFUNCTION enable editor/serialization/GC.</li><li>Memory: UObject is GC-managed; non-UObject types use RAII; prefer TUniquePtr/TSharedPtr.</li><li>Modules: Build.cs defines dependencies; keep includes in .cpp, forward-declare in headers.</li><li>Gameplay Framework: GameMode, GameState, PlayerController, PlayerState, Pawn/Character.</li><li>Components: Reusable behavior attached to Actors; favor this over deep inheritance.</li></ul><p>Syntax and idioms</p><ul><li>Use const correctness; pass by const reference or value (small POD) where appropriate.</li><li>Prefer ranges-based for where available; avoid dynamic_cast; use Cast&lt;&gt; and Interfaces.</li><li>Avoid exceptions; UE uses ensure/check/log and error codes.</li><li>Timers via FTimerManager; Delegates for eventing; Multicast for signals.</li></ul><p>Patterns in this project</p><ul><li>Component-driven: UStatsComponent, UInteractionComponent, UHealthBarComponent (optional UI)</li><li>Interfaces for capabilities: IInteractable, IDamageable, ITalkable</li><li>Data assets for tuning; blueprints extend visuals/FX only.</li></ul><p>Build and tooling</p><ul><li>Use VS 2022 + Epic toolchain. Run Build from UE or UnrealBuildTool. UHT must succeed.</li><li>Add modules: &quot;EnhancedInput&quot;, &quot;AIModule&quot;, &quot;UMG&quot;, &quot;GameplayTasks&quot;, &quot;GameplayTags&quot; (optional), &quot;NavigationSystem&quot;.</li></ul><p>Testing</p><ul><li>Use Automation Spec (C++), or Functional Tests (Blueprint) triggered in PIE.</li><li>Prefer fast, deterministic tests; avoid latent tests where possible.</li></ul><p>Do/Don’t</p><ul><li>Do keep .h small and stable; move impl to .cpp.</li><li>Do annotate UPROPERTY with EditDefaultsOnly, EditAnywhere, BlueprintReadOnly appropriately.</li><li>Don’t tick by default; use events and timers.</li><li>Don’t hold raw owning pointers to UObjects; rely on UPROPERTY or TWeakObjectPtr.</li></ul>',13)]))}const f=t(i,[["render",n]]);export{m as __pageData,f as default};
