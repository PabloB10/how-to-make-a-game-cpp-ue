import{_ as a,c as t,o as n,ag as i}from"./chunks/framework.S-Qvb3wi.js";const d=JSON.parse('{"title":"Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"reference/architecture.md","filePath":"reference/architecture.md","lastUpdated":null}'),l={name:"reference/architecture.md"};function s(r,e,o,p,c,m){return n(),t("div",null,e[0]||(e[0]=[i(`<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><p>This page summarizes systems and patterns used in the UE platformer.</p><p>The following content is sourced from <code>Docs/architecture.md</code>:</p><hr><p>Guiding principles</p><ul><li>Composition over inheritance; small focused components.</li><li>Data-driven design via Primary Data Assets (tuning); Blueprints for presentation.</li><li>Clear interfaces for capabilities (Interactable, Damageable, Talkable, etc.).</li><li>Event-driven updates; avoid Tick unless necessary.</li></ul><p>Core modules/classes</p><ul><li><p>Character &amp; Camera</p><ul><li>APlatformCharacter (derived from ACharacter) <ul><li>Components: USpringArmComponent, UCameraComponent, UStatsComponent, UInteractionComponent</li><li>Input: Enhanced Input (IMC_Player)</li></ul></li><li>UPlayerCameraSettings (Data Asset) for camera tuning</li></ul></li><li><p>Interaction System</p><ul><li>UInteractionComponent: performs line/sphere traces; manages current focus target</li><li>IInteractable: interface with GetInteractionVerb, CanInteract, Interact</li><li>Widget prompt: UUserWidget (WBP_InteractPrompt)</li></ul></li><li><p>Stats &amp; Damage</p><ul><li>UStatsComponent: Health, Stamina, optional Shield; regen settings</li><li>IDamageable: ApplyDamage, OnDeath delegate</li><li>Damage types via UDamageType subclasses (e.g., Melee, Ranged)</li></ul></li><li><p>NPCs</p><ul><li>ABaseNPC: pawn/character with UStatsComponent, UCapsuleComponent, UWidgetComponent for markers</li><li>AFriendlyNPC: adds dialog capability (ITalkable)</li><li>AEnemyNPC: AIController + Behavior Tree (BT_Enemy), Blackboard (BB_Enemy)</li></ul></li><li><p>AI</p><ul><li>Perception via UAIPerceptionComponent (sight)</li><li>BehaviorTree tasks/services for patrol, chase, attack</li><li>EQS optional for smarter movement</li></ul></li><li><p>World Interaction</p><ul><li>AInteractiveActor: base for levers, pickups, doors; exposes IInteractable</li><li>ATriggerEventActor: fires gameplay events (delegates) when overlapped or interacted</li><li>Gameplay effects/actions defined as data (UPlatformEffect definition)</li></ul></li></ul><p>Data assets (examples)</p><ul><li>UCharacterTuningData: WalkSpeed, AirControl, JumpCount, GravityScale</li><li>UCameraTuningData: TargetArmLength, Lag, RotationLag, FOV</li><li>UEnemyTuningData: PerceptionRange, AttackRange, AttackCooldown, Damage</li><li>UInteractableData: DisplayName, Verb, Cooldown, UIIcon, SFX, VFX</li></ul><p>Subsystems</p><ul><li>UPlatformerGameInstanceSubsystem: global services (save/load, tag registry)</li><li>UPlatformerWorldSubsystem: world-level systems (spawners, registries)</li></ul><p>Testing</p><ul><li>Functional tests (Gauntlet or Automation Spec) for: movement, interaction prompt, enemy chase, damage/death.</li></ul><p>Performance</p><ul><li>Avoid per-frame allocations; reserve arrays; reuse timers.</li><li>Keep collision channels and queries lean; batch traces when possible.</li></ul><p>Logging/Debug</p><ul><li>Categories: LogPlatformer, LogAI, LogInteraction</li><li>Minimal on-screen debug via DrawDebug helpers, toggled via cvars.</li></ul><p>Layers and responsibilities</p><ul><li>Input Layer: Enhanced Input mapping context and actions; converts raw input to intent (Move, Look, Jump, Interact, Sprint).</li><li>Character Layer: Movement and camera; contains minimal state; delegates features to components.</li><li>Systems Layer (Components/Interfaces): Interaction, Stats/Damage, Dialogue, Effects.</li><li>AI Layer: Perception, Behavior Trees, Tasks/Services; interacts with Systems layer via interfaces.</li><li>Data Layer: Primary Data Assets for tuning; no logic.</li></ul><p>Interfaces (contracts)</p><ul><li>IInteractable <ul><li>GetInteractionVerb() -&gt; FText</li><li>CanInteract(AActor* Instigator) -&gt; bool</li><li>Interact(AActor* Instigator) -&gt; void</li></ul></li><li>IDamageable <ul><li>ApplyDamage(const FDamageData&amp;) -&gt; float (actual applied)</li><li>OnDeath: Multicast delegate with killer/instigator</li></ul></li><li>ITalkable (optional) <ul><li>BeginDialog(AActor* Instigator) -&gt; void</li></ul></li></ul><p>Dependencies and coupling</p><ul><li>Character depends on components via composition; systems accessed via interfaces (no hard cast to concrete types).</li><li>AI depends on Blackboard keys and interfaces; no direct references to player character class.</li><li>UI (prompts) depends on interfaces and data only; no heavy business logic.</li></ul><p>Configuration and cvars (examples)</p><ul><li>platformer.CameraLag=12.0</li><li>platformer.InteractionRadius=60.0</li><li>ai.EnemySightRadius=1800</li></ul><p>Error handling</p><ul><li>Use ensureMsgf for recoverable config mistakes; checkNoEntry for illegal paths.</li><li>Validate Data Assets at load (OnAssetCreated/EditorValidator optional) and at BeginPlay.</li></ul><p>Diagrams</p><p>System flow (high level)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Input (Enhanced Input)</span></span>
<span class="line"><span>	└─ IMC_Player (Move, Look, Jump, Interact, Sprint)</span></span>
<span class="line"><span>				│</span></span>
<span class="line"><span>				▼</span></span>
<span class="line"><span>Character (APlatformCharacter)</span></span>
<span class="line"><span>	├─ MovementComponent</span></span>
<span class="line"><span>	├─ Camera (SpringArm + CameraComponent)</span></span>
<span class="line"><span>	├─ UInteractionComponent ──► IInteractable targets</span></span>
<span class="line"><span>	└─ UStatsComponent ──► IDamageable (apply damage)</span></span>
<span class="line"><span>				│</span></span>
<span class="line"><span>				▼</span></span>
<span class="line"><span>AI / NPCs</span></span>
<span class="line"><span>	├─ AEnemyNPC + AIController + BT/BB + Perception</span></span>
<span class="line"><span>	└─ AFriendlyNPC (ITalkable)</span></span></code></pre></div><p>Interaction flow</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Tick/Timer/Trigger → UInteractionComponent → SphereTrace</span></span>
<span class="line"><span>	→ Focus target found? → Update prompt (UI)</span></span>
<span class="line"><span>	→ On Interact Action → IInteractable::CanInteract → IInteractable::Interact</span></span>
<span class="line"><span>		→ Execute effects (data-driven) → UI feedback (SFX/VFX optional)</span></span></code></pre></div>`,33)]))}const g=a(l,[["render",s]]);export{d as __pageData,g as default};
